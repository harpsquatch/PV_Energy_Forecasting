# -*- coding: utf-8 -*-
"""
@author: Harpreet Singh
"""

#We're going to predict exactly the next two days of yield generated by plant_1, please note that we can have similar results predicting dc power generation rather then daily yield generated, but I think that for this purpose daily yield generated power is a good evidence of power prediction.

#We will tune, with auto_arima function, a SEASONAL ARIMA(p,d,q) + (P,D,Q,m) model,on the last 4 days(384 observations) to see if our model can capture the last generation trend.


from pmdarima.arima import auto_arima
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.stattools import adfuller
import pandas as pd 
import matplotlib.pyplot as plt


gen_1 = pd.read_csv('//gen_1')

pred_gen = gen_1.copy() 
pred_gen = pred_gen.groupby('DATE_TIME').sum() 
pred_gen = pred_gen['DAILY_YIELD'].reset_index() 


pred_gen = gen_1.copy() 
pred_gen = pred_gen.groupby('DATE_TIME').sum() 
pred_gen = pred_gen['DAILY_YIELD'][-288:].reset_index() #Last -288 values - 288/96 is 3 days 
pred_gen


pred_gen.set_index('DATE_TIME',inplace =True)
pred_gen.head() 


#Test for stationarity 

#we are trying whether to accept the Null Hypothesis H0 (that the time series has a unit root, indicating it is non-stationary) or reject H0 and go with the Alternative Hypothesis (that the time series has no unit root and is stationary).


result = adfuller(pred_gen['DAILY_YIELD']) #THis is all for the test, whatever follows is just to make it look clean

print('Augmented Dickey-Fuller Test:')
labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']

for value,label in zip(result,labels):
    print(label+' : '+str(value) )
    
if result[1] <= 0.05: #This is the p value 
    print("strong evidence against the null hypothesis, reject the null hypothesis. Data has no unit root and is stationary")
else:
    print("weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary ")
    
    
train = pred_gen[:192] #We are going to split the data manually #data till 192
test = pred_gen[-96:]  #Last 96 values 

#Lets plot the data that we have 

plt.figure(figsize = (15,5))
plt.plot(train,label = 'Train',color = 'navy')
plt.plot(test,label = 'Test', color = 'orange')
plt.title('last 4 days of daily yield')

plt.legend() 
plt.show() 
    
# Tune with the auto_arima function (Seasonal ARIMA) 

arima_model = auto_arima(train,
                         start_p=0,d=1,start_q=0,
                         max_p=4,max_d=4,max_q=4,
                         start_P=0,D=1,start_Q=0,
                         max_P=1,max_D=1,max_Q=1,m=96,
                         seasonal=True,
                         error_action='warn',trace=True,
                         supress_warning=True,stepwise=True,
                         random_state=20,n_fits=1)


prediction = pd.DataFrame(arima_model.predict(n_periods=96))

prediction.columns = ['predicted_yield']

#Lets draw figures 

fig,ax = plt.subplots(ncols =2,nrows = 1,dpi = 100, figsize = (17,5))
ax[0].plot(train,label='Train',color='navy')
ax[0].plot(test,label='Test',color='darkorange')
ax[0].plot(prediction,label='Prediction',color='green')
ax[0].legend()
ax[0].set_title('Forecast on test set',size=17)
ax[0].set_ylabel('kW',color='navy',fontsize=17)


f_prediction=pd.DataFrame(arima_model.predict(n_periods=194))
f_prediction.columns=['predicted_yield']
ax[1].plot(pred_gen,label='Original data',color='navy')
ax[1].plot(f_prediction,label='18th & 19th June',color='green')
ax[1].legend()
ax[1].set_title('Next days forecast',size=17)
plt.show()

arima_model.summary()

#Lets see how good our model is

from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

print('SARIMAX R2 Score: %f' % (r2_score(prediction['predicted_yield'],test['DAILY_YIELD'])))

    
    
    
    
    